# name: CI

# on:
#   push:
#     branches: [ master ]
#   pull_request:

# jobs:
#   build:
#     name: Build (Maven)
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Java 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: temurin
#           java-version: '17'
#           cache: maven
        
#       - name: Build with Maven
#         run: mvn clean package -DskipTests

#       - name: Upload artifact (JAR)
#         uses: actions/upload-artifact@v4
#         with: 
#           name: app-jar
#           path: target/*.jar
        
#   test:
#     name: Teste ping/pong
#     runs-on: ubuntu-latest
#     env: 
#       APP_PORT: "8080"
#     needs: build
#     steps:
#       - name: Baixar JAR do build
#         uses: actions/download-artifact@v4
#         with: 
#           name: app-jar
#           path: app
      
#       - name: Iniciar aplicação em background
#         run: |
#           nohup java -jar app/*.jar --server.port="$APP_PORT" > app.log 2>&1 &
#           echo $! > app.pid

#       - name: Aguardar app ficar pronto (timeout ~30s)
#         shell: bash
#         run: |
#           for i in {1..30}; do
#             if curl -fsS --max-time 1 http://localhost:$APP_PORT/actuator/health >/dev/null 2>&1 || \
#                curl -fsS --max-time 1 http://localhost:$APP_PORT/ping >/dev/null 2>&1; then
#               echo "App está respondendo."
#               exit 0
#             fi
#             sleep 1
#           done
#           echo "App não inicializou a tempo."
#           echo "Ultimas linhas do log: " && tail -n 200 app.log || true
#           exit 1
      
#       - name: Testar endpoint /ping
#         run: |
#           curl -fsS http://localhost:$APP_PORT/ping | grep "pong"

#       - name: Parar aplicação
#         if: always()
#         run: |
#           if [ -f app.pid ]; then kill "$(cat app.pid)" || true; fi
#           sleep 1
#           pkill -f 'java -jar' || true
#           echo "Logs: " && tail -n 200 app.log || true
#   test_q:
#     name: Teste de qualidade
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: checkout
#         uses: actions/checkout@v4
#       - name: setup java 17
#         uses: actions/setup-java@v4
#         with:
#             distribution: temurin
#             java-version: '17'
#             cache: maven
#       - name: pmd (xml)
#         run: mvn -B clean pmd:pmd 

#       - name: pmd check
#         run: mvn -B clean pmd:check
#         continue-on-error: true
      
#       # - name: Gerar relatório (pmd)
#       #   run: mvn -B pmd:report
#       #   continue-on-error: true

#       # - name: upload relatório (pmd)
#       #   if: always()
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: pmd-reports
#       #     path: |
#       #       target/pmd.xml
#       #       target/site/pmd.html
#       #       target/site/**/pmd.html
#       #       target/site/pmd.xml

#       - name: Parar aplicação
#         if: always()
#         run: |
#           if [ -f app.pid ]; then kill "$(cat app.pid)" || true; fi
#           sleep 1
#           pkill -f 'java -jar' || true
#           echo "Logs: " && tail -n 200 app.log || true

#   teste_u:
#     name: Testes unitários
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Setup Java 17
#         uses: actions/setup-java@v4
#         with:
#             distribution: temurin
#             java-version: '17'
#             cache: maven
#       - name: mvn test
#         run: mvn -B clean test

#       # - name: Generate Surefire HTML report
#       #   run: mvn -B surefire-report:report

#       # - name: Procurar surefire-report.html
#       #   run: |
#       #     echo "Diretório atual: $(pwd)"
#       #     find . -type f -name "surefire-report.html" || echo "Arquivo não encontrado"

#       # - name: Listar relatórios gerados
#       #   run: |
#       #     ls -la target || true
#       #     ls -la target/site || true
#       #     test -f target/site/surefire-report.html && echo "FOUND surefire-report.html" || echo "MISSING surefire-report.html"

#       # - name: upload relatório (Surefire)
#       #   if: always()
#       #   uses: actions/upload-artifact@v4
#       #   with:
#       #     name: unit-test-reports
#       #     path: |
#       #       target/surefire-reports/*.xml
#       #       target/site/surefire-report.html

#       - name: Parar aplicação
#         if: always()
#         run: |
#           if [ -f app.pid ]; then kill "$(cat app.pid)" || true; fi
#           sleep 1
#           pkill -f 'java -jar' || true
#           echo "Logs: " && tail -n 200 app.log || true

#   reports:
#     name: Relatórios combinados (Testes + PMD)
#     runs-on: ubuntu-latest
#     needs: build
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4
#       - name: Setup Java 17
#         uses: actions/setup-java@v4
#         with:
#           distribution: temurin
#           java-version: '17'
#           cache: maven

#     # Gera tudo (Surefire + PMD + etc.)
#       - name: Gerar relatórios do Maven
#         run: mvn -B clean verify site

#       - name: Upload Maven site
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: all-reports
#           path: |
#             target/site/


name: CI

on:
  push:
    branches: [ master ]
  pull_request:

jobs:
  build:
    name: Build (Maven)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      - name: Build (skip tests)
        run: mvn -B clean package -DskipTests

      - name: Upload artifact (JAR)
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  test:
    name: Teste ping/pong
    runs-on: ubuntu-latest
    needs: build
    env:
      APP_PORT: "8080"
    steps:
      - name: Baixar JAR do build
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: app

      - name: Iniciar aplicação em background
        run: |
          nohup java -jar app/*.jar --server.port="$APP_PORT" > app.log 2>&1 &
          echo $! > app.pid

      - name: Aguardar app ficar pronto (timeout ~30s)
        shell: bash
        run: |
          for i in {1..30}; do
            if curl -fsS --max-time 1 http://localhost:$APP_PORT/actuator/health >/dev/null 2>&1 || \
               curl -fsS --max-time 1 http://localhost:$APP_PORT/ping >/dev/null 2>&1; then
              echo "App está respondendo."
              exit 0
            fi
            sleep 1
          done
          echo "App não inicializou a tempo."
          echo "Últimas linhas do log:" && tail -n 200 app.log || true
          exit 1

      - name: Testar endpoint /ping
        run: curl -fsS http://localhost:$APP_PORT/ping | grep "pong"

      - name: Parar aplicação
        if: always()
        run: |
          if [ -f app.pid ]; then kill "$(cat app.pid)" || true; fi
          sleep 1
          pkill -f 'java -jar' || true
          echo "Logs:" && tail -n 200 app.log || true

  reports:
    name: Relatório único (Testes + PMD)
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven

      # Roda tudo até verify (testes unitários e integrações via Failsafe, se configurado)
      - name: Run verify (tests + checks)
        run: mvn -B clean test

      # Gera o site com todos os relatórios configurados em <reporting>
      - name: Generate Maven site (Surefire + PMD)
        run: mvn -B site

      # (Opcional) conferir os arquivos
      - name: List generated reports
        run: |
          find . -type f -path "*/target/site/*.html" -print | sort

      # Publica UM artefato com todo o site (HTMLs dos testes e do PMD)
      - name: Upload single report (Maven site)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: all-reports
          if-no-files-found: error
          path: |
            target/site/
            **/target/site/
    



